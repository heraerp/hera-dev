/**
 * üè≠ MANUFACTURED: Orders Management CRUD Fields
 * Generated by HERA Toyota Manufacturing System
 * Compatible with HERA Universal Data Schema
 */

import { CRUDField, CRUDAction, BulkOperation, CRUDFilter } from '@/templates/crud/types/crud-types'
import { Eye, Edit, Trash2, CheckCircle, Clock, ChefHat, Bell, DollarSign, Download } from 'lucide-react'

// üçΩÔ∏è Order Status Workflow
export const ORDER_STATUS_WORKFLOW = {
  PENDING: { label: 'Pending', color: 'yellow', next: ['CONFIRMED', 'CANCELLED'] },
  CONFIRMED: { label: 'Confirmed', color: 'blue', next: ['PREPARING', 'CANCELLED'] },
  PREPARING: { label: 'Preparing', color: 'orange', next: ['READY', 'CANCELLED'] },
  READY: { label: 'Ready', color: 'green', next: ['COMPLETED', 'CANCELLED'] },
  COMPLETED: { label: 'Completed', color: 'purple', next: [] },
  CANCELLED: { label: 'Cancelled', color: 'red', next: [] }
} as const

// üçΩÔ∏è Order Types
export const ORDER_TYPES = [
  { value: 'dine_in', label: 'Dine In', color: 'blue', icon: 'üçΩÔ∏è' },
  { value: 'takeout', label: 'Takeout', color: 'green', icon: 'ü•°' },
  { value: 'delivery', label: 'Delivery', color: 'purple', icon: 'üöö' },
  { value: 'online', label: 'Online', color: 'orange', icon: 'üíª' }
] as const

// üçΩÔ∏è Payment Methods
export const PAYMENT_METHODS = [
  { value: 'cash', label: 'Cash', color: 'green' },
  { value: 'card', label: 'Card', color: 'blue' },
  { value: 'mobile', label: 'Mobile Pay', color: 'purple' },
  { value: 'gift_card', label: 'Gift Card', color: 'orange' }
] as const

// üéØ HERA Universal Schema Compliant Order Fields
export const OrderCRUDFields: CRUDField[] = [
  // Core Order Information
  {
    key: 'transaction_number',
    label: 'Order Number',
    type: 'text',
    required: true,
    readonly: true,
    searchable: true,
    sortable: true,
    showInList: true,
    showInCreate: false,
    showInEdit: false,
    showInView: true,
    placeholder: 'Auto-generated',
    helpText: 'Unique order identifier (auto-generated)',
    // Simple text display
  },
  
  // Customer Information
  {
    key: 'customer_name',
    label: 'Customer Name',
    type: 'text',
    required: true,
    searchable: true,
    sortable: true,
    showInList: true,
    showInCreate: true,
    showInEdit: true,
    showInView: true,
    placeholder: 'Enter customer name',
    validation: {
      required: 'Customer name is required',
      minLength: { value: 2, message: 'Name must be at least 2 characters' },
      maxLength: { value: 100, message: 'Name cannot exceed 100 characters' }
    }
  },
  
  {
    key: 'customer_phone',
    label: 'Customer Phone',
    type: 'tel',
    required: false,
    searchable: true,
    sortable: false,
    showInList: true,
    showInCreate: true,
    showInEdit: true,
    showInView: true,
    placeholder: '+1 (555) 123-4567',
    validation: {
      pattern: { 
        value: /^[\+]?[1-9][\d]{0,15}$/, 
        message: 'Please enter a valid phone number' 
      }
    }
  },
  
  // Order Status (Critical for workflow)
  {
    key: 'transaction_status',
    label: 'Order Status',
    type: 'select',
    options: Object.entries(ORDER_STATUS_WORKFLOW).map(([value, config]) => ({
      value,
      label: config.label,
      color: config.color
    })),
    required: true,
    sortable: true,
    showInList: true,
    showInCreate: true,
    showInEdit: true,
    showInView: true,
    defaultValue: 'PENDING',
    // Status rendering handled in component
    statusDisplay: true
  },
  
  // Order Type
  {
    key: 'order_type',
    label: 'Order Type',
    type: 'select',
    options: ORDER_TYPES,
    required: true,
    sortable: true,
    showInList: true,
    showInCreate: true,
    showInEdit: true,
    showInView: true,
    defaultValue: 'dine_in',
    // Type rendering handled in component
    typeDisplay: true
  },
  
  // Table Information (for dine-in)
  {
    key: 'table_number',
    label: 'Table Number',
    type: 'text',
    required: false,
    searchable: true,
    sortable: true,
    showInList: true,
    showInCreate: true,
    showInEdit: true,
    showInView: true,
    placeholder: 'e.g., Table 5, A1, Counter',
    helpText: 'Table assignment for dine-in orders',
    visible: (formData: any) => formData?.order_type === 'dine_in'
  },
  
  // Financial Information
  {
    key: 'total_amount',
    label: 'Total Amount',
    type: 'currency',
    required: true,
    sortable: true,
    showInList: true,
    showInCreate: true,
    showInEdit: true,
    showInView: true,
    align: 'right',
    validation: {
      required: 'Total amount is required',
      min: { value: 0, message: 'Amount must be positive' }
    },
    // Currency formatting handled in component
  },
  
  {
    key: 'subtotal',
    label: 'Subtotal',
    type: 'currency',
    required: false,
    sortable: true,
    showInList: false,
    showInCreate: true,
    showInEdit: true,
    showInView: true,
    align: 'right',
    readonly: true
  },
  
  {
    key: 'tax_amount',
    label: 'Tax Amount',
    type: 'currency',
    required: false,
    sortable: true,
    showInList: false,
    showInCreate: true,
    showInEdit: true,
    showInView: true,
    align: 'right',
    readonly: true
  },
  
  {
    key: 'tip_amount',
    label: 'Tip Amount',
    type: 'currency',
    required: false,
    sortable: true,
    showInList: false,
    showInCreate: true,
    showInEdit: true,
    showInView: true,
    align: 'right',
    defaultValue: 0
  },
  
  // Payment Information
  {
    key: 'payment_method',
    label: 'Payment Method',
    type: 'select',
    options: PAYMENT_METHODS,
    required: false,
    sortable: true,
    showInList: true,
    showInCreate: true,
    showInEdit: true,
    showInView: true,
    defaultValue: 'cash'
  },
  
  {
    key: 'payment_status',
    label: 'Payment Status',
    type: 'select',
    options: [
      { value: 'pending', label: 'Pending', color: 'yellow' },
      { value: 'paid', label: 'Paid', color: 'green' },
      { value: 'refunded', label: 'Refunded', color: 'red' },
      { value: 'partial', label: 'Partial', color: 'orange' }
    ],
    required: false,
    sortable: true,
    showInList: true,
    showInCreate: true,
    showInEdit: true,
    showInView: true,
    defaultValue: 'pending'
  },
  
  // Timing Information
  {
    key: 'transaction_date',
    label: 'Order Date',
    type: 'datetime',
    required: true,
    sortable: true,
    showInList: true,
    showInCreate: true,
    showInEdit: false,
    showInView: true,
    defaultValue: new Date().toISOString(),
    // Date formatting handled in component
  },
  
  {
    key: 'estimated_completion',
    label: 'Estimated Completion',
    type: 'datetime',
    required: false,
    sortable: true,
    showInList: true,
    showInCreate: true,
    showInEdit: true,
    showInView: true,
    helpText: 'When the order should be ready'
  },
  
  {
    key: 'actual_completion',
    label: 'Actual Completion',
    type: 'datetime',
    required: false,
    sortable: true,
    showInList: false,
    showInCreate: false,
    showInEdit: true,
    showInView: true,
    readonly: true,
    helpText: 'When the order was actually completed'
  },
  
  // Special Instructions
  {
    key: 'special_instructions',
    label: 'Special Instructions',
    type: 'textarea',
    required: false,
    searchable: true,
    showInList: false,
    showInCreate: true,
    showInEdit: true,
    showInView: true,
    placeholder: 'Any special requests or dietary restrictions...',
    validation: {
      maxLength: { value: 500, message: 'Instructions cannot exceed 500 characters' }
    }
  },
  
  // Delivery Information (for delivery orders)
  {
    key: 'delivery_address',
    label: 'Delivery Address',
    type: 'textarea',
    required: false,
    searchable: true,
    showInList: false,
    showInCreate: true,
    showInEdit: true,
    showInView: true,
    placeholder: 'Full delivery address...',
    visible: (formData: any) => formData?.order_type === 'delivery'
  },
  
  {
    key: 'delivery_fee',
    label: 'Delivery Fee',
    type: 'currency',
    required: false,
    sortable: true,
    showInList: false,
    showInCreate: true,
    showInEdit: true,
    showInView: true,
    align: 'right',
    defaultValue: 0,
    visible: (formData: any) => formData?.order_type === 'delivery'
  },
  
  // Staff Assignment
  {
    key: 'assigned_staff',
    label: 'Assigned Staff',
    type: 'text',
    required: false,
    searchable: true,
    sortable: true,
    showInList: true,
    showInCreate: true,
    showInEdit: true,
    showInView: true,
    placeholder: 'Staff member handling this order'
  },
  
  // Order Notes (Internal)
  {
    key: 'internal_notes',
    label: 'Internal Notes',
    type: 'textarea',
    required: false,
    searchable: true,
    showInList: false,
    showInCreate: true,
    showInEdit: true,
    showInView: true,
    placeholder: 'Internal notes for staff...',
    helpText: 'Not visible to customers'
  },
  
  // System Fields
  {
    key: 'created_at',
    label: 'Created',
    type: 'datetime',
    required: false,
    sortable: true,
    showInList: false,
    showInCreate: false,
    showInEdit: false,
    showInView: true,
    readonly: true
  },
  
  {
    key: 'updated_at',
    label: 'Last Updated',
    type: 'datetime',
    required: false,
    sortable: true,
    showInList: false,
    showInCreate: false,
    showInEdit: false,
    showInView: true,
    readonly: true
  }
]

// üîç Order Filters
export const OrderCRUDFilters: CRUDFilter[] = [
  {
    key: 'transaction_number',
    label: 'Order Number',
    type: 'text',
    placeholder: 'Search by order number...'
  },
  {
    key: 'customer_name',
    label: 'Customer Name',
    type: 'text',
    placeholder: 'Search by customer name...'
  },
  {
    key: 'transaction_status',
    label: 'Order Status',
    type: 'select',
    options: [
      { value: '', label: 'All Statuses' },
      ...Object.entries(ORDER_STATUS_WORKFLOW).map(([value, config]) => ({
        value,
        label: config.label
      }))
    ]
  },
  {
    key: 'order_type',
    label: 'Order Type',
    type: 'select',
    options: [
      { value: '', label: 'All Types' },
      ...ORDER_TYPES
    ]
  },
  {
    key: 'payment_status',
    label: 'Payment Status',
    type: 'select',
    options: [
      { value: '', label: 'All Payment Status' },
      { value: 'pending', label: 'Pending' },
      { value: 'paid', label: 'Paid' },
      { value: 'refunded', label: 'Refunded' },
      { value: 'partial', label: 'Partial' }
    ]
  },
  {
    key: 'date_range',
    label: 'Order Date',
    type: 'daterange',
    placeholder: 'Select date range...'
  },
  {
    key: 'amount_range',
    label: 'Amount Range',
    type: 'numberrange',
    placeholder: 'Min - Max amount...'
  },
  {
    key: 'table_number',
    label: 'Table Number',
    type: 'text',
    placeholder: 'Search by table...'
  }
]

// ‚ö° Order Actions
export const OrderCRUDActions: CRUDAction[] = [
  {
    key: 'view',
    label: 'View Order',
    icon: Eye,
    variant: 'ghost',
    position: ['row'],
    onClick: (item: any) => {
      console.log('View order:', item)
      // TODO: Implement view order modal
    }
  },
  {
    key: 'edit',
    label: 'Edit Order',
    icon: Edit,
    variant: 'default',
    position: ['row'],
    visible: (item: any) => ['PENDING', 'CONFIRMED'].includes(item.transaction_status),
    onClick: (item: any) => {
      console.log('Edit order:', item)
      // TODO: Implement edit order functionality
    }
  },
  {
    key: 'confirm',
    label: 'Confirm Order',
    icon: CheckCircle,
    variant: 'default',
    position: ['row'],
    visible: (item: any) => item.transaction_status === 'PENDING',
    onClick: async (item: any) => {
      console.log('Confirm order:', item)
      // TODO: Implement order confirmation
    }
  },
  {
    key: 'start_preparation',
    label: 'Start Preparation',
    icon: ChefHat,
    variant: 'default',
    position: ['row'],
    visible: (item: any) => item.transaction_status === 'CONFIRMED',
    onClick: async (item: any) => {
      console.log('Start preparation:', item)
      // TODO: Implement start preparation
    }
  },
  {
    key: 'mark_ready',
    label: 'Mark Ready',
    icon: Bell,
    variant: 'default',
    position: ['row'],
    visible: (item: any) => item.transaction_status === 'PREPARING',
    onClick: async (item: any) => {
      console.log('Mark ready:', item)
      // TODO: Implement mark ready
    }
  },
  {
    key: 'complete',
    label: 'Complete Order',
    icon: CheckCircle,
    variant: 'default',
    position: ['row'],
    visible: (item: any) => item.transaction_status === 'READY',
    onClick: async (item: any) => {
      console.log('Complete order:', item)
      // TODO: Implement complete order
    }
  },
  {
    key: 'process_payment',
    label: 'Process Payment',
    icon: DollarSign,
    variant: 'default',
    position: ['row'],
    visible: (item: any) => item.payment_status === 'pending',
    onClick: async (item: any) => {
      console.log('Process payment:', item)
      // TODO: Implement payment processing
    }
  },
  {
    key: 'print_receipt',
    label: 'Print Receipt',
    icon: Download,
    variant: 'outline',
    position: ['row', 'toolbar'],
    onClick: (item: any) => {
      console.log('Print receipt:', item)
      // TODO: Implement receipt printing
    }
  },
  {
    key: 'cancel',
    label: 'Cancel Order',
    icon: Trash2,
    variant: 'destructive',
    position: ['row'],
    visible: (item: any) => !['COMPLETED', 'CANCELLED'].includes(item.transaction_status),
    confirm: 'Are you sure you want to cancel this order? This action cannot be undone.',
    onClick: async (item: any) => {
      console.log('Cancel order:', item)
      // TODO: Implement order cancellation
    }
  }
]

// üîÑ Bulk Operations
export const OrderBulkOperations: BulkOperation[] = [
  {
    key: 'bulk_confirm',
    label: 'Confirm Orders',
    description: 'Confirm multiple pending orders',
    icon: CheckCircle,
    variant: 'default',
    visible: (items: any[]) => items.every(item => item.transaction_status === 'PENDING'),
    execute: async (selectedIds: string[], items: any[]) => {
      console.log('Bulk confirm orders:', selectedIds)
      // TODO: Implement bulk confirmation
    }
  },
  {
    key: 'bulk_start_preparation',
    label: 'Start Preparation',
    description: 'Start preparation for multiple confirmed orders',
    icon: ChefHat,
    variant: 'default',
    visible: (items: any[]) => items.every(item => item.transaction_status === 'CONFIRMED'),
    execute: async (selectedIds: string[], items: any[]) => {
      console.log('Bulk start preparation:', selectedIds)
      // TODO: Implement bulk preparation start
    }
  },
  {
    key: 'bulk_mark_ready',
    label: 'Mark Ready',
    description: 'Mark multiple orders as ready',
    icon: Bell,
    variant: 'default',
    visible: (items: any[]) => items.every(item => item.transaction_status === 'PREPARING'),
    execute: async (selectedIds: string[], items: any[]) => {
      console.log('Bulk mark ready:', selectedIds)
      // TODO: Implement bulk mark ready
    }
  },
  {
    key: 'bulk_complete',
    label: 'Complete Orders',
    description: 'Complete multiple ready orders',
    icon: CheckCircle,
    variant: 'default',
    visible: (items: any[]) => items.every(item => item.transaction_status === 'READY'),
    execute: async (selectedIds: string[], items: any[]) => {
      console.log('Bulk complete orders:', selectedIds)
      // TODO: Implement bulk completion
    }
  },
  {
    key: 'bulk_export',
    label: 'Export Orders',
    description: 'Export selected orders to CSV',
    icon: Download,
    variant: 'outline',
    execute: async (selectedIds: string[], items: any[]) => {
      console.log('Bulk export orders:', selectedIds)
      // TODO: Implement bulk export
    }
  },
  {
    key: 'bulk_cancel',
    label: 'Cancel Orders',
    description: 'Cancel selected orders',
    icon: Trash2,
    variant: 'destructive',
    visible: (items: any[]) => items.every(item => !['COMPLETED', 'CANCELLED'].includes(item.transaction_status)),
    confirm: 'Are you sure you want to cancel the selected orders? This action cannot be undone.',
    execute: async (selectedIds: string[], items: any[]) => {
      console.log('Bulk cancel orders:', selectedIds)
      // TODO: Implement bulk cancellation
    }
  }
]

// üìä Order Statistics Fields (for dashboard)
export const OrderStatisticsFields = [
  { key: 'total_orders', label: 'Total Orders', type: 'number' },
  { key: 'pending_orders', label: 'Pending Orders', type: 'number' },
  { key: 'active_orders', label: 'Active Orders', type: 'number' },
  { key: 'completed_orders', label: 'Completed Orders', type: 'number' },
  { key: 'cancelled_orders', label: 'Cancelled Orders', type: 'number' },
  { key: 'total_revenue', label: 'Total Revenue', type: 'currency' },
  { key: 'average_order_value', label: 'Average Order Value', type: 'currency' },
  { key: 'peak_hours', label: 'Peak Hours', type: 'text' }
]

// üéØ Quick Create Order Template
export const QuickCreateOrderFields = OrderCRUDFields.filter(field => 
  ['customer_name', 'order_type', 'table_number', 'total_amount', 'payment_method'].includes(field.key)
)

// üçΩÔ∏è Kitchen Display Fields
export const KitchenDisplayFields = OrderCRUDFields.filter(field => 
  ['transaction_number', 'customer_name', 'order_type', 'table_number', 'transaction_status', 'estimated_completion', 'special_instructions'].includes(field.key)
)

// üí∞ Payment Processing Fields
export const PaymentProcessingFields = OrderCRUDFields.filter(field => 
  ['transaction_number', 'customer_name', 'total_amount', 'payment_method', 'payment_status', 'tip_amount'].includes(field.key)
)