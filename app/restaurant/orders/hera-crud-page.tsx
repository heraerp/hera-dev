/**
 * 🏭 MANUFACTURED: Orders Management Page
 * Generated by HERA Toyota Manufacturing System
 * Compatible with HERA Universal Data Schema
 */

'use client'

import React, { useState, useMemo } from 'react'
import { motion } from 'framer-motion'
import { toast } from 'sonner'
import { useRestaurantManagement } from '@/hooks/useRestaurantManagement'
import { HERAUniversalCRUD } from '@/templates/crud/components/HERAUniversalCRUD'
import { createOrderServiceAdapter } from '@/lib/crud-configs/order-service-adapter'
import { 
  OrderCRUDFields, 
  OrderCRUDFilters, 
  OrderCRUDActions, 
  OrderBulkOperations,
  ORDER_STATUS_WORKFLOW,
  ORDER_TYPES,
  QuickCreateOrderFields,
  KitchenDisplayFields,
  PaymentProcessingFields
} from '@/lib/crud-configs/order-crud-fields'
import { Card } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { 
  Package, 
  ArrowLeft, 
  Activity, 
  Clock,
  CheckCircle,
  AlertCircle,
  DollarSign,
  ChefHat,
  Utensils,
  TrendingUp,
  Users,
  Calendar
} from 'lucide-react'
import Link from 'next/link'

export default function OrderManagementPage() {
  const [mounted, setMounted] = useState(false)
  const [activeTab, setActiveTab] = useState('all')
  const { restaurantData, loading, error } = useRestaurantManagement()
  
  // Service adapter
  const serviceAdapter = useMemo(() => createOrderServiceAdapter(), [])

  // Prevent hydration mismatch
  React.useEffect(() => {
    setMounted(true)
  }, [])

  // Success/error handlers
  const handleSuccess = (message: string, operation: string) => {
    toast.success(message, {
      description: `Order ${operation} completed successfully`,
      duration: 4000
    })
    console.log(`✅ Order ${operation} successful:`, message)
  }

  const handleError = (error: string) => {
    toast.error('Order Operation Failed', {
      description: error,
      duration: 6000
    })
    console.error('❌ Order CRUD operation failed:', error)
  }

  // Tab-specific field configurations
  const getFieldsForTab = (tab: string) => {
    switch (tab) {
      case 'kitchen':
        return KitchenDisplayFields
      case 'payment':
        return PaymentProcessingFields
      case 'quick':
        return QuickCreateOrderFields
      default:
        return OrderCRUDFields
    }
  }

  // Tab-specific filters
  const getFiltersForTab = (tab: string) => {
    switch (tab) {
      case 'pending':
        return [...OrderCRUDFilters, { key: 'transaction_status', value: 'PENDING', hidden: true }]
      case 'active':
        return [...OrderCRUDFilters, { key: 'transaction_status', value: ['CONFIRMED', 'PREPARING'], hidden: true }]
      case 'completed':
        return [...OrderCRUDFilters, { key: 'transaction_status', value: 'COMPLETED', hidden: true }]
      default:
        return OrderCRUDFilters
    }
  }

  // Loading state
  if (!mounted || loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-blue-50 flex items-center justify-center">
        <Card className="p-8 text-center">
          <div className="w-8 h-8 animate-spin rounded-full border-4 border-purple-600 border-t-transparent mx-auto mb-4"></div>
          <p className="text-gray-600">Loading orders...</p>
        </Card>
      </div>
    )
  }

  // Error state
  if (!restaurantData) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-blue-50 flex items-center justify-center">
        <Card className="p-8 text-center">
          <Package className="w-12 h-12 text-amber-500 mx-auto mb-4" />
          <h3 className="text-lg font-semibold mb-2">Restaurant Setup Required</h3>
          <p className="text-gray-600 mb-4">
            Please complete your restaurant setup to access orders.
          </p>
          <Button onClick={() => window.location.href = '/setup/restaurant'}>
            Complete Setup
          </Button>
        </Card>
      </div>
    )
  }

  const organizationId = restaurantData.organizationId

  return (
    <motion.div 
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-blue-50"
    >
      {/* Header */}
      <div className="relative overflow-hidden bg-gradient-to-r from-purple-600 via-blue-600 to-indigo-600">
        <div className="absolute inset-0 bg-black/10"></div>
        <div className="relative max-w-7xl mx-auto px-4 py-8 md:py-12">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Link href="/restaurant" className="p-2 rounded-xl bg-white/20 hover:bg-white/30 transition-colors">
                <ArrowLeft className="w-5 h-5 text-white" />
              </Link>
              <div>
                <h1 className="text-3xl font-bold text-white mb-2">
                  Orders Management
                </h1>
                <p className="text-purple-100">
                  {restaurantData.businessName} • Real-time Order Processing
                </p>
              </div>
            </div>
            <div className="flex items-center gap-3">
              <Badge className="gap-1 bg-green-500/20 text-green-100 border-green-400/30">
                <Activity className="w-3 h-3" />
                Live System
              </Badge>
              <Badge className="gap-1 bg-blue-500/20 text-blue-100 border-blue-400/30">
                <ChefHat className="w-3 h-3" />
                Kitchen Connected
              </Badge>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto p-4 md:p-6 -mt-8 relative z-10">
        {/* Quick Stats */}
        <div className="grid md:grid-cols-6 gap-4 mb-8">
          <Card className="p-6 bg-white/80 backdrop-blur-sm border-0 shadow-xl">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-purple-100 rounded-xl">
                <Utensils className="w-6 h-6 text-purple-600" />
              </div>
              <div>
                <div className="text-2xl font-bold text-gray-900">--</div>
                <div className="text-sm text-gray-600">Total Orders</div>
              </div>
            </div>
          </Card>
          <Card className="p-6 bg-white/80 backdrop-blur-sm border-0 shadow-xl">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-yellow-100 rounded-xl">
                <Clock className="w-6 h-6 text-yellow-600" />
              </div>
              <div>
                <div className="text-2xl font-bold text-gray-900">--</div>
                <div className="text-sm text-gray-600">Pending</div>
              </div>
            </div>
          </Card>
          <Card className="p-6 bg-white/80 backdrop-blur-sm border-0 shadow-xl">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-orange-100 rounded-xl">
                <ChefHat className="w-6 h-6 text-orange-600" />
              </div>
              <div>
                <div className="text-2xl font-bold text-gray-900">--</div>
                <div className="text-sm text-gray-600">In Kitchen</div>
              </div>
            </div>
          </Card>
          <Card className="p-6 bg-white/80 backdrop-blur-sm border-0 shadow-xl">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-green-100 rounded-xl">
                <CheckCircle className="w-6 h-6 text-green-600" />
              </div>
              <div>
                <div className="text-2xl font-bold text-gray-900">--</div>
                <div className="text-sm text-gray-600">Completed</div>
              </div>
            </div>
          </Card>
          <Card className="p-6 bg-white/80 backdrop-blur-sm border-0 shadow-xl">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-blue-100 rounded-xl">
                <DollarSign className="w-6 h-6 text-blue-600" />
              </div>
              <div>
                <div className="text-2xl font-bold text-gray-900">--</div>
                <div className="text-sm text-gray-600">Revenue</div>
              </div>
            </div>
          </Card>
          <Card className="p-6 bg-white/80 backdrop-blur-sm border-0 shadow-xl">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-indigo-100 rounded-xl">
                <TrendingUp className="w-6 h-6 text-indigo-600" />
              </div>
              <div>
                <div className="text-2xl font-bold text-gray-900">--</div>
                <div className="text-sm text-gray-600">Avg Value</div>
              </div>
            </div>
          </Card>
        </div>

        {/* Orders Management Interface */}
        <Card className="bg-white/90 backdrop-blur-sm border-0 shadow-2xl">
          <div className="p-6">
            <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
              <TabsList className="grid w-full grid-cols-6 mb-6">
                <TabsTrigger value="all" className="flex items-center gap-2">
                  <Package className="w-4 h-4" />
                  All Orders
                </TabsTrigger>
                <TabsTrigger value="pending" className="flex items-center gap-2">
                  <Clock className="w-4 h-4" />
                  Pending
                </TabsTrigger>
                <TabsTrigger value="active" className="flex items-center gap-2">
                  <Activity className="w-4 h-4" />
                  Active
                </TabsTrigger>
                <TabsTrigger value="kitchen" className="flex items-center gap-2">
                  <ChefHat className="w-4 h-4" />
                  Kitchen
                </TabsTrigger>
                <TabsTrigger value="payment" className="flex items-center gap-2">
                  <DollarSign className="w-4 h-4" />
                  Payment
                </TabsTrigger>
                <TabsTrigger value="completed" className="flex items-center gap-2">
                  <CheckCircle className="w-4 h-4" />
                  Completed
                </TabsTrigger>
              </TabsList>

              <TabsContent value="all" className="space-y-4">
                <HERAUniversalCRUD
                  entityType="order"
                  entityTypeLabel="Orders"
                  entitySingular="order"
                  entitySingularLabel="Order"
                  service={serviceAdapter}
                  fields={OrderCRUDFields}
                  filters={OrderCRUDFilters}
                  actions={OrderCRUDActions}
                  bulkOperations={OrderBulkOperations}
                  organizationId={organizationId}
                  onSuccess={handleSuccess}
                  onError={handleError}
                  
                  // Features
                  enableRealTime={true}
                  enableSearch={true}
                  enableFilters={true}
                  enableSorting={true}
                  enablePagination={true}
                  enableBulkActions={true}
                  enableExport={true}
                  
                  // Pagination settings
                  pagination={{
                    pageSize: 25,
                    showPageSizeSelector: true,
                    pageSizeOptions: [10, 25, 50, 100]
                  }}
                  
                  // Default sort
                  defaultSort={{
                    key: 'transaction_date',
                    direction: 'desc'
                  }}
                />
              </TabsContent>

              <TabsContent value="pending" className="space-y-4">
                <HERAUniversalCRUD
                  entityType="order"
                  entityTypeLabel="Pending Orders"
                  entitySingular="order"
                  entitySingularLabel="Order"
                  service={serviceAdapter}
                  fields={OrderCRUDFields}
                  filters={getFiltersForTab('pending')}
                  actions={OrderCRUDActions}
                  bulkOperations={OrderBulkOperations}
                  organizationId={organizationId}
                  onSuccess={handleSuccess}
                  onError={handleError}
                  
                  enableRealTime={true}
                  enableSearch={true}
                  enableFilters={true}
                  enableBulkActions={true}
                  
                  defaultSort={{
                    key: 'transaction_date',
                    direction: 'asc'
                  }}
                />
              </TabsContent>

              <TabsContent value="active" className="space-y-4">
                <HERAUniversalCRUD
                  entityType="order"
                  entityTypeLabel="Active Orders"
                  entitySingular="order"
                  entitySingularLabel="Order"
                  service={serviceAdapter}
                  fields={OrderCRUDFields}
                  filters={getFiltersForTab('active')}
                  actions={OrderCRUDActions}
                  bulkOperations={OrderBulkOperations}
                  organizationId={organizationId}
                  onSuccess={handleSuccess}
                  onError={handleError}
                  
                  enableRealTime={true}
                  enableSearch={true}
                  enableFilters={true}
                  enableBulkActions={true}
                  
                  defaultSort={{
                    key: 'estimated_completion',
                    direction: 'asc'
                  }}
                />
              </TabsContent>

              <TabsContent value="kitchen" className="space-y-4">
                <HERAUniversalCRUD
                  entityType="order"
                  entityTypeLabel="Kitchen Display"
                  entitySingular="order"
                  entitySingularLabel="Order"
                  service={serviceAdapter}
                  fields={KitchenDisplayFields}
                  filters={getFiltersForTab('active')}
                  actions={OrderCRUDActions}
                  organizationId={organizationId}
                  onSuccess={handleSuccess}
                  onError={handleError}
                  
                  enableRealTime={true}
                  enableSearch={false}
                  enableFilters={false}
                  enableBulkActions={false}
                  enableExport={false}
                  
                  pagination={{
                    pageSize: 50,
                    showPageSizeSelector: false
                  }}
                  
                  defaultSort={{
                    key: 'estimated_completion',
                    direction: 'asc'
                  }}
                />
              </TabsContent>

              <TabsContent value="payment" className="space-y-4">
                <HERAUniversalCRUD
                  entityType="order"
                  entityTypeLabel="Payment Processing"
                  entitySingular="order"
                  entitySingularLabel="Order"
                  service={serviceAdapter}
                  fields={PaymentProcessingFields}
                  filters={OrderCRUDFilters}
                  actions={OrderCRUDActions}
                  organizationId={organizationId}
                  onSuccess={handleSuccess}
                  onError={handleError}
                  
                  enableRealTime={true}
                  enableSearch={true}
                  enableFilters={true}
                  enableBulkActions={false}
                  enableExport={true}
                  
                  defaultSort={{
                    key: 'transaction_date',
                    direction: 'desc'
                  }}
                />
              </TabsContent>

              <TabsContent value="completed" className="space-y-4">
                <HERAUniversalCRUD
                  entityType="order"
                  entityTypeLabel="Completed Orders"
                  entitySingular="order"
                  entitySingularLabel="Order"
                  service={serviceAdapter}
                  fields={OrderCRUDFields}
                  filters={getFiltersForTab('completed')}
                  actions={OrderCRUDActions}
                  organizationId={organizationId}
                  onSuccess={handleSuccess}
                  onError={handleError}
                  
                  enableRealTime={true}
                  enableSearch={true}
                  enableFilters={true}
                  enableBulkActions={false}
                  enableExport={true}
                  
                  defaultSort={{
                    key: 'actual_completion',
                    direction: 'desc'
                  }}
                />
              </TabsContent>
            </Tabs>
          </div>
        </Card>

        {/* Order Status Legend */}
        <Card className="bg-white/90 backdrop-blur-sm border-0 shadow-xl mt-6">
          <div className="p-6">
            <h3 className="text-lg font-semibold mb-4">Order Status Workflow</h3>
            <div className="flex flex-wrap gap-3">
              {Object.entries(ORDER_STATUS_WORKFLOW).map(([status, config]) => (
                <div key={status} className="flex items-center gap-2">
                  <div className={`w-3 h-3 rounded-full bg-${config.color}-500`}></div>
                  <span className="text-sm font-medium">{config.label}</span>
                  {config.next.length > 0 && (
                    <span className="text-xs text-gray-500">
                      → {config.next.join(', ')}
                    </span>
                  )}
                </div>
              ))}
            </div>
          </div>
        </Card>

        {/* Order Types Legend */}
        <Card className="bg-white/90 backdrop-blur-sm border-0 shadow-xl mt-6">
          <div className="p-6">
            <h3 className="text-lg font-semibold mb-4">Order Types</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              {ORDER_TYPES.map((type) => (
                <div key={type.value} className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
                  <span className="text-xl">{type.icon}</span>
                  <div>
                    <div className={`font-medium text-${type.color}-600`}>{type.label}</div>
                    <div className="text-xs text-gray-500 capitalize">{type.value.replace('_', ' ')}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </Card>

        {/* Footer */}
        <div className="mt-8 text-center">
          <p className="text-sm text-gray-500">
            Orders Management • Manufactured by HERA Universal CRUD System
          </p>
        </div>
      </div>
    </motion.div>
  )
}